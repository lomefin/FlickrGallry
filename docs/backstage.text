La creación de Gallry
=====================

Primero hay que elegir el framework de JS que se usará para la implementación, yo elegí Mootools porque me resulta más cómodo y es compatible con JQuery.

Los proyectos en Javascript generalmente deben venir como un demo del mismo que tenga el código como librería, los que quieran usar el código pueden bajar directamente la carpeta que tiene la librería.

La estructura base que uso es la siguiente:

-LIB //Aqui va todo el Javascript
  -Mootools //La librería mínima requerida
  -Gallry //Aquí va el proyecto

Tengo pensado que Gallry no de ser tan grande como para usar varios archivos, además, aún no he usado esos sistemas donde tienes el código en varios archivos y luego se compilan, quizás más adelante.

El Happy Path
--------------
Lo que tengo pensado que haga la aplicación es lo siguiente:

1. Se ingresa el nombre de usuario que se quiere revisar
2. El sistema muestra un listado de fotos del usuario seleccionado
3. El usuario de la aplicación selecciona fotos que le guste
4. El sistema muestra las urls de cada una de las fotos seleccionadas

El código.
----------
Aunque no es bueno pensar tan adelante, comencé con algunos elementos de configuración, indicando los tamaños que tiene Flickr disponible y la configuración del API_KEY, y los tamaños que querrá el usuario para usar en la aplicación. Usé variables globales con el prefijo GLR para tratar de hacer menos invasiva a la librería.

Para comenzar, hay que agregar la toma de control al sistema. Esto debería dispararlo un boton, un link o comenzar con la página, especialmente en tiempo de desarrollo.
Para invocarlo, habrá que decirle donde es que podrá trabajar, yo lo vincularé a un div con id gallry_container y lo haré correr directamente en la carga de la página, eso en mootools se hace de la siguiente manera:

	window.addEvent('domready', function() 
	{
    	new Gallry('gallry_container');
	});

Lo primero que hace el código es crear un div para buscar a un usuario. Para construir con Mootools se deben crear nuevos elementos y luego inyectarlos. El ejemplo aplicado al buscador de usuarios es el siguiente:
	
	//Creación de los elementos
	var userSelector = new Element('div',{'id':'gallry_user_selector'});
	var userSelectorInput = new Element('input',{'type':'text', 'id':'gallry_username'});
	var userSelectorLabel = new Element('label',{'for':'gallry_username',html:'Username:'});
	var userSelectorFinder = new Element('button',{'id':'gallry_user_selector_find',html:'Find'})
	//Inyeccion de los elementos al nodo padre
	userSelectorLabel.inject(userSelector);
	userSelectorInput.inject(userSelector);
	userSelectorFinder.inject(userSelector);

Y también quiero vincular el botón a la acción de buscar, como primero me preocuparé de hacer esto que funcione y luego que funcione bien- siguiendo la recomendación de [Hernán](http://www.ataxic.org/about/#hernan)- lo haré todo inline.

	userSelectorFinder.addEvent('click', function()
	{
		var username = userSelectorInput.get('value');
		//Aqui va el código de la búsqueda
	}.bind(this));
	
Hay que prestar atención con que esto demuestra claramente el tema de las clausuras. Las funciones son realmente más que solo el código ejecutable, son _código más contexto_, por lo tanto esta función usará la variable <code>userSelectorInput</code> que estaba definida antes. Además, para poder utilizar el <code>this</code> como está definido en la función que contiene a userSelectorFinder, debo decirle a la funcion que acabo de crear <code>bind(this)</code> así, el "puntero" a <code>this</code> de esa clausura _será el mismo que el de la función que la contiene_, sino el contexto cambiaría a la de <code>userSelectorFinder</code>.

###Mootools More

Mootools viene en dos partes: Mootools Core y Mootools More, el primero es lo mínimo que debes tener para decir que tienes Mootools, Mootools More son herramientas extra que se pueden agregar para potenciar tu código.
More necesita Core, pero no al revés y hay elementos de ambos paquetes que se pueden descartar, para esto pueden ingresar a [Mootools Core Builder](http://mootools.net/core/) y a [Mootools More Builder](http://mootools.net/more/) y bajar copiar personalizadas de las librerías.
El soporte para JSONP que es una manera de acceder a los datos sin tener problemas de Cross Site Scripting (y que son un dolor de cabeza) viene en Mootools More, al igual que el codigo para hacer desaparecer objetos del DOM en un comando.
El código del invocador de la API de Flickr es el siguiente:


	invokeAPI : function(method, parameters,callback)
	{
		//Adds the minimal parameters to invoke the Flickr API
		var invocation = {'method':method,'api_key':GLR_API_KEY,'format':'json'};
		//Add the extra parameters that are request per function
		for(var key in parameters)
		{
			invocation[key] = parameters[key];
		}
		var mootoolsJSONP = new Request.JSONP({
		    url: GLR_FULL_URI,
		    callbackKey: 'jsoncallback',
		    data: invocation,
		    onRequest: function(url){
		        // a script tag is created with a src attribute equal to url
		        console.log(url);
		    },
		    onComplete: function(data){
		        callback(method,data);
		    }
		}).send();

	}

Esto debería ser perfectible, pero por ahora funciona y eso es lo importante.

Luego se implementó un método que pregunte por las fotos públicas que tenga el usuario dado que ya podemos saber su verdadero nombre de usuario. Por mientras solo busca las 50 últimas, pero luego podremos scrollear las más viejas.
Para tener estos datos simplemente hacemos una invocacion a invokeAPI.

	this.invokeAPI('flickr.people.getPublicPhotos',{'user_id':userId,'per_page':50},
		function(method,data)
		{
			console.log(data);
			this.showUserGallery(data);
		}.bind(this)
	);

Posteriormente, se implementó un método que coloca imagenes en un div que permitirán ser seleccionadas más adelante. El código del método no lo colocaré completo aquí pero en resumen es el siguiente:

	showUserGallery : function(data)
	{
		//Tengo la lista de fotos, de manera abreviada
		var photoList = data.photos.photo;
		//Itero por la lista
		for(var index =0 ; index< photoList.length; index++)
		{
			//Abrevio el objeto
			var pic = photoList[index];
			//Genero la url que corresponde a la imagen
			var picUrl = 'http://farm'+pic.farm+'.staticflickr.com/'+
							pic.server+'/'+pic.id+'_'+pic.secret+'_'+GLR_DEFAULT_PREVIEW_SIZE+'.jpg';
			//Creo el elemento nuevo 
			var img = new Element('img',{'class':'thumbnail', src:picUrl,'alt':pic.name});
			img.inject(link);
		}
	}

Finalmente, le agrego un poco de estilo al sitio del demo para que se vea más agradable. Usé [Twitter Bootstrap](http://twitter.github.com/bootstrap/index.html) que ya es mi favorito para partir un desarrollo. Si se fijan, ya hay algunas clases de CSS incrustadas en la librería, esto vincula la librería a bootstrap, pero dado que la unión es solamente un texto, no aumenta el acoplamiento del sistema como un todo. Quizás se debería modificar el CSS para que cumpla con los requerimientos de layout de la librería, pero esto es una practica común, pues no hay otra vuelta más simple que dar.
Bootstrap está escrito en LESS, se puede compilar antes o durante la visualización, yo utilizo la librería less.js para compilar la hoja de estilo cuando se carga. 

	<link rel="stylesheet/less" href="css/less/bootstrap/bootstrap.less" />
	<script src="lib/less/less-1.1.5.min.js" type="text/javascript"></script>

